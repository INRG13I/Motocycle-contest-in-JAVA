plugins {
    id 'java'
    id 'application'
    id 'org.openjfx.javafxplugin' version '0.1.0'
}

group = 'ro.mpp2024'
version = '1.0-SNAPSHOT'

repositories {
    mavenCentral()
}

dependencies {
    //mavenrepositories
    testImplementation platform('org.junit:junit-bom:5.9.1')
    testImplementation 'org.junit.jupiter:junit-jupiter:5.7.2'
    testImplementation 'junit:junit:4.13.2'
    implementation 'org.xerial:sqlite-jdbc:3.34.0'
    implementation group: 'org.apache.logging.log4j', name: 'log4j-core', version: '2.23.0'
    implementation group: 'org.apache.logging.log4j', name: 'log4j-api', version: '2.23.0'
    implementation group: 'com.google.guava', name: 'guava', version: '31.1-jre'
    testImplementation 'org.testng:testng:7.1.0'
    implementation group: 'org.openjfx', name: 'javafx', version: '23-ea+3', ext: 'pom'
}

javafx {
    version = "22"
    modules = [ 'javafx.controls', 'javafx.fxml' ]
}

sourceSets {
    main {
        resources {
            srcDirs = ["src/main/resources", "src/main/java"]
        }
    }
}

application{
    mainClass = 'Main'
}

jar{
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    manifest {
        attributes('Main-Class':'Main')
    }
    from{
        configurations.runtimeClasspath.collect {it.isDirectory() ? it : zipTree(it)}
    }
}

test {
    // Define the test classes to include in the test task
    include '**/*Test.class'

    // Set the test working directory (if necessary)
    testClassesDirs = project.sourceSets.test.output.classesDirs

    // Set the classpath for the tests (if necessary)
    classpath = project.sourceSets.test.runtimeClasspath
}